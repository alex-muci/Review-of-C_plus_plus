Move from one place to another, through obstacles (e.g. cars or maze)

Planning: find path from start to the goal/end, 
given a map, start location, goal location, cost function.
Aim is to find the minimum cost path (e.g. shortest path).

You can think of the path as a graph with nodes.
A general search is to expand the cells visited sequentially 
(but no go back to cells already visited): https://en.wikipedia.org/wiki/Breadth-first_search

A more efficient algo inveted years ago at Stanford is the A*, which has an additional step.
The pseudo code is below (the .cpp in this folder implements it in separate functions).

Search( grid, initial_point, goal_point ) :

    1. Initialize an empty list of open nodes.

    2. Initialize a starting node with the following:
    - x and y values given by initial_point.
    - g = 0, where g is the cost for each move (which gets incremented at each step)
    - h given by the heuristic function (a function of the current coordinates and the goal).
      An heuristic function can, for example, be the distance from the goal if there were no obstabcles (optimistic behavior); 
      an approximation (that never overestimates the cost for reaching the goal) is all we need (see https://en.wikipedia.org/wiki/Admissible_heuristic)
    
    - add the new node to the list of open nodes.

    3. while the list of open nodes is nonempty:
        - Sort the open list by f-value (which is  g + h(x,y))
        - Pop the optimal cell (called the current cell, i.e. the one with lowerst f-value)
        - Mark the cell's coordinates in the grid as part of the path.
        
        if the current cell is the goal cell:
            return the grid.

        else, expand the search to the current node's neighbors. This includes the following steps:
        - Check each neighbor cell in the grid to ensure that the cell is empty: it hasn't been closed and is not an obstacle.
        - If the cell is empty, compute the cost (g value) and the heuristic, and 
           add it to the list of open nodes.
        - Mark the cell as closed.

    5. If you exit the while loop because the list of open nodes is empty, you have run out of new nodes to explore and haven't found a path.



The A* algorithm finds a path from the start node to the end node by checking for open neighbors of the current node, 
computing a heuristic for each of the neighbors, and adding those neighbors to the list of open nodes to explore next. 
The next node to explore is the one with the lowest total cost + heuristic (g + h). 
This process is repeated until the end is found, as long as there are still open nodes to explore.