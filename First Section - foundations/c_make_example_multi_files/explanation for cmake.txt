In the previous notebook, you saw how example code could be split into multiple .h and .cpp files, 
and you used g++ to build all of the files together. For small projects with a handful of files, 
this works well. But what would happen if there were hundreds, or even thousands, of files in the project? 
You could type the names of the files at the command line each time, but there tools to make this easier.

Many larger C++ projects use a build system to manage all the files during the build process. 
The build system allows for large projects to be compiled with a few commands, and build systems 
are able to do this in an efficient way by only recompiling files that have been changed.

When you compile a project with g++, g++ actually performs several distinct tasks:

1. The preprocessor runs and executes any statement beginning with a hash symbol: #, such as #include statements. 
This ensures all code is in the correct location and ready to compile.

2. Each file in the source code is compiled into an "object file" (a .o file). 
Object files are platform-specific machine code that will be used to create an executable.

3. The object files are "linked" together to make a single executable. 
In the examples you have seen so far, this executable is a.out, but you 
can specify whatever name you want.

It is possible to have g++ perform each of the steps separately 
by using the -c flag. For example,


g++ -c main.cpp
will produce a main.o file, and 
that file can be converted to an executable with

g++ main.o

NB: For multiple files:
g++ -c *.cpp
g++ *.o

or directily g++ *.cpp to produce the output a.out

But what if you make changes to your code and you need to re-compile? 
In that case, you can compile only the file that you changed, 
and you can use the existing object files 


===
CMake and Make
CMake is an open-source, platform-independent build system. 
CMake uses text documents, denoted as CMakeLists.txt files, 
to manage build environments, like make. 
A comprehensive tutorial on CMake would require an entire course, 
but you can learn the basics of CMake here, so you'll be ready to use it in the upcoming projects.

CMakeLists.txt
CMakeList.txt files are simple text configuration files that tell CMake how to build your project. 
There can be multiple CMakeLists.txt files in a project. 
In fact, one CMakeList.txt file can be included in each directory of the project, 
indicating how the files in that directory should be built.

These files can be used to specify the locations of necessary packages, 
set build flags and environment variables, specify build target names and locations, and other actions.

You are going to create a basic CMakeLists.txt file:
CMakeLists.txt file below (4 lines): see CMakeLists.txt in this directory
cmake_minimum_required(VERSION 3.5.1)  // minimum cmake version required to 3.5.1
set(CMAKE_CXX_STANDARD 17)  // uses C++ 14 or 17
project(ExampleProject)  // CMake requires that we name the project, so you should choose a name

// Add an executable (add_executable command) specifying the executable name, 
// along with the locations of all the source files that you will need. 
// CMake has the ability to automatically find source files in a directory, 
// but for now, you can just specify each file needed (path relative to the CMakeLists.txt file)
add_executable(my_executable_name src/main.cpp src/vect_add_one.cpp src/increment_and_sum.cpp)

NB: A typical CMake project will have a build directory in the same place as the top-level CMakeLists.txt.
so, for examples
> mkdr build
> cd build
From within the build directory, you can now run CMake as follows:
> cmake ..
> make

The first line directs the cmake command at the top-level CMakeLists.txt file with .. 
This command uses the CMakeLists.txt to configure the project and create a Makefile in the build directory.
In the second line, make finds the Makefile and uses the instructions in the Makefile to build the project.

If everything has worked correctly, you should now be able to run your executable from the build folder:
./my_executable_name

Try modifying one of the files. When you are ready to run the project again, 
you'll only need to run the make command from the build folder, 
and only that file will be compiled again.